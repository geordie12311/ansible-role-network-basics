---

- name: CAPTURE INTERFACE BLOCK
  block:
  - name: Capture and parse 'show interface'
    ansible.utils.cli_parse:
      command: "show interfaces"
      parser: 
        name: ansible.netcommon.ntc_templates
    register: _int_result
    vars:
      ansible_connection: ansible.netcommon.network_cli
  - ansible.builtin.debug:
      var: _int_result.parsed
      verbosity: 2
  tags: parse_intf

- name: NETBOX BLOCK
  block:
  - name: Push interface data to netbox
    netbox.netbox.netbox_device_interface:
      netbox_url: "{{ net_netbox_url }}"
      netbox_token: "{{ net_netbox_token }}"
      validate_certs: no
      data:
        device: "{{ inventory_hostname }}"
        name: "{{ item.interface }}"
        description: "{{ item.description | default(omit) }}"
        mac_address: "{{ item.address | default(_default_mac, true) | ansible.utils.hwaddr('linux') }}"
        type: "Virtual"
        enabled: "{{ item.enabled | default(omit) }}"
        mtu: "1500"
# workaround for Juniper Devices MTU failure        
#        mtu: "{% if item.mtu | length > 1 and item.mtu != 'Unlimited' %}{{ item.mtu |int }}{% endif %}"
    loop: "{{ _int_result.parsed }}"
    loop_control:
      extended: true
      label: "{{ item.interface }}"
    when: ansible_loop.index0 < net_max_intf_loops

  - name: Push IP addresses to device interfaces
    netbox.netbox.netbox_ip_address:
      netbox_url: "{{ net_netbox_url }}"
      netbox_token: "{{ net_netbox_token }}"
      validate_certs: false
      data:
        address: "{%if item.ip_address is defined %}{{ item.ip_address }}
          {% else %}{{ item.local }}{% endif %}"
        assigned_object:
          name: "{{ item.interface }}"
          device: "{{ inventory_hostname }}"
    loop: "{{ _int_result.parsed }}"
    loop_control:
      label: "{{ item.interface }}"
      extended: true
    when: (item.ip_address is defined and item.ip_address != "")
      or (item.local is defined and item.local != "" )
      and ansible_loop.index0 < net_max_intf_loops
  tags: [netbox]
