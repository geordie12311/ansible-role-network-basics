---
  # "l2_interfaces": [
  #       {
  #           "name": "Ethernet0/0"
  #       },
  #       {
  #           "access": {
  #               "vlan": 10
  #           },
  #           "name": "Ethernet0/1"
  #       },

- name: NETBOX BLOCK
  block:
  - name: GET device ID if empty
    uri: 
      url: "{{ net_netbox_url }}/api/dcim/devices/?name={{ inventory_hostname }}"
      method: GET
      validate_certs: no
      headers:
        content-type: 'aplication/json'
        Authorization: "Token {{ net_netbox_token }}"
      body_format: json
    register: _dcim_device
    when: device_id == '' or device_id == 0
  - name: "set netbox device ID {{ _dcim_device.json.results[0].id }}"
    set_fact:
      device_id: "{{ _dcim_device.json.results[0].id }}"
    when: device_id == '' or device_id == 0 and _dcim_device.json.results is defined and _dcim_device.json.results | length > 0
  - name: GET netbox DCIM interface information
    uri:
      url: "{{ net_netbox_url }}/api/dcim/interfaces/?device_id={{ device_id }}"
      method: GET
      validate_certs: no
      headers:
        content-type: 'aplication/json'
        Authorization: "Token {{ net_netbox_token }}"
      body_format: json
    register: _intf_info
  # - name: debug netbox interface config
  #   debug:
  #     var: _intf_info
  #     verbosity: 2
  # - name: debug interface tags
  #   debug: 
  #     var: item.tags[0].name
  #     verbosity: 2
  #   loop: "{{ _intf_info.json.results }}" 
  #   when: item.tags is defined and item.tags|length > 0
  - name: set variable for RM for all access ports
    set_fact:
      net_intfs: "{{ net_intfs + [{'name':item.name, 'mode':'access', 'access':{'vlan': item.untagged_vlan.vid} }] }}"
    loop: "{{ _intf_info.json.results }}"
    loop_control:
      label: "{{ item.name }} ==> vlan: {{ item.untagged_vlan.vid | default('skipped') }}"
    when: item.mode is defined and item.mode.value is defined and item.mode.value == 'access'
      and (net_intf_filter == "" or net_intf_filter == item.name )
  - debug:
      var: net_intfs
      verbosity: 2
  tags: [netbox]

- name: push L2 interface template to IOS L2 switch
  cisco.ios.ios_config:
    src: "tag_{{ item.tags[0].name }}.j2"
    before: "default interface {{ item.name }}"
  when: item.tags is defined and item.tags|length > 0
  loop: "{{ _intf_info.json.results }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [netbox]

- name: PUSH L2 interface config BLOCK
  block:
  - name: push L2 interface to IOS
    cisco.ios.ios_l2_interfaces:
      config: "{{ net_intfs }}"
      state: replaced
    when: ansible_network_os == 'ios' and net_intfs | length > 0
  become: true
  tags: [push_intf_l2, push_intf]

